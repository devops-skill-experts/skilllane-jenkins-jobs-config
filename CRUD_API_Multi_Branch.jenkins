#!/usr/bin/env groovy

multibranchPipelineJob('CRUD-API')
{
    displayName('CRUD_API_Multi_Branch')
    branchSources
    {
        git
        {
            id('skilllane-crud-example')
            remote('https://github.com/devops-skill-experts/skilllane-crud-example.git')
            credentialsId('')
            includes('develop test master main')
        }
    }

    configure { project ->
        def extensionsNode = project / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'

        extensionsNode << 'jenkins.plugins.git.traits.BranchDiscoveryTrait'{
        }        
        
        extensionsNode << 'jenkins.plugins.git.traits.CloneOptionTrait' {
            extension(class:'hudson.plugins.git.extensions.impl.CloneOption')
            {
                shallow(false)
                noTags(false)
                reference('')
                timeout(39)
                honorRefspec(false)
            }
        }
        
        def branchSourceNode = project / 'sources' / 'data' / 'jenkins.branch.BranchSource'
        branchSourceNode << 'buildStrategies' {
            'jenkins.branch.buildstrategies.basic.NamedBranchBuildStrategyImpl'
            {
                'filters'
                {
                    'jenkins.branch.buildstrategies.basic.NamedBranchBuildStrategyImpl_-WildcardsNameFilter'
                    {
                        includes('develop test master main')
                    }
                }
            }
        }
    }

    configure { project ->
        def extensionsNode = project / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'source' / 'traits'

        extensionsNode << 'jenkins.plugins.git.traits.TagDiscoveryTrait'{
        }               
        def branchSourceNode = project / 'sources' / 'data' / 'jenkins.branch.BranchSource' / 'buildStrategies'
        branchSourceNode << 'jenkins.branch.buildstrategies.basic.TagBuildStrategyImpl'{                    
            atLeastMillis(-1)
            atMostMillis(86400000)                    
        }             
    }

    configure { project ->
        def extensionsNode = project
        extensionsNode << disabled(true)
    }

    triggers
    {
        cron('*/10 * * * *')
    }
}
